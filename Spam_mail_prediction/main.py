# -*- coding: utf-8 -*-
"""Spam Mail Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hemxnu7Zr_hbyn_P_-UwRrC8JsLpikQk

# **Work flow**

Mail data --> Data preprocessing --> Train test split--> Logistic Regression Model

Input mail --> Trained logistic Model --> Prediction(Spam or Ham)
"""

# importing libraries

import numpy as np
import pandas as pd 
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# **Data collection and Preprocessing**"""

mail_df= pd.read_csv("mail_data.csv")
print(mail_df.head())

#replace the null value with a null string

mail_data = mail_df.where((pd.notnull(mail_df)),'')
print(mail_data.head())


#how many rows and columns
print(mail_data.shape)


"""# **Label encoding**"""
#Taking spam mail as 0 and ham mail as 1

mail_data.loc[mail_data['Category'] == 'spam','Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham','Category',] = 1

print(mail_data.head())


# separating the data as test and lable

x=mail_data['Message']
y=mail_data['Category']

print(x)
print(y)

"""# **Spliting the data into trining and testing data**"""

x_train, x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state = 3)
print(x.shape,x_train.shape, x_test.shape)


"""**Feature Extention**
Transform text data to feature vectors that can be  used as input to the Logistic Regration
"""

feature_extension = TfidfVectorizer(min_df=1, stop_words='english', lowercase='True')
x_train_feature = feature_extension.fit_transform(x_train)
x_test_feature = feature_extension.transform(x_test)


# convert y_train and y_test values as integers

y_train = y_train.astype('int')
y_test = y_test.astype('int')

print(x_train_feature )
print(x_test_feature)

"""# **Training Model**"""
model = LogisticRegression()

#training logistic regression model with training data
model.fit(x_train_feature,y_train)


"""# Evaluting the trained model"""
#prediction on training data

pre_training_data = model.predict(x_train_feature)
acc_training_data = accuracy_score(y_train,pre_training_data)
print('The accuracy for training data will be ',acc_training_data)

#prediction on test data

pre_test_data = model.predict(x_test_feature)
acc_test_data = accuracy_score(y_test,pre_test_data)
print('The accuracy for test data will be ',acc_test_data)

# Building Prediction

input_mail=["Free entry in 2 a wkly comp to win FA Cup final tkts 21st May 2005. Text FA to 87121 to receive entry question(std txt rate)T&C's apply 08452810075over18's"]
#convert text to feature vector
input_data_features = feature_extension.transform(input_mail)


#making Prediction

prediction = model.predict(input_data_features)
# print(prediction)
if prediction[0] ==0:
    print("This message is Spam")
else:
    print("This message is not Spam")


# Thank You-->